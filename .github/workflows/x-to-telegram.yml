name: X â†’ Telegram

on:
  schedule:
    # Every 30 minutes (UTC)
    - cron: "*/30 * * * *"
  # Manual trigger from the Actions tab
  workflow_dispatch: {}

# Avoid overlapping runs if one is still in progress
concurrency:
  group: x-to-telegram
  cancel-in-progress: true

# Needed to push the updated last_tweet_id.json back to the repo
permissions:
  contents: write

jobs:
  run-script:
    runs-on: ubuntu-latest
    # Keep the runner from idling too long; the script now exits fast on 429s
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show files (debug)
        run: |
          pwd
          ls -la

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          # If you keep requirements at repo root, this speeds things up
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt
            **/pyproject.toml

      - name: Install dependencies
        # Uses requirements.txt if present; otherwise falls back to inline install
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install tweepy python-dotenv requests
          fi

      - name: Run once (rate-limit safe)
        env:
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # --once makes a single API call and exits.
          # The script is set to fail fast on rate limits (no long sleeps).
          python x_to_telegram.py --once --max-per-run 50

      - name: Commit last_tweet_id.json if changed
        if: always()
        run: |
          if [ -f last_tweet_id.json ]; then
            if [ -n "$(git status --porcelain last_tweet_id.json)" ]; then
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add last_tweet_id.json
              git commit -m "chore: update last_tweet_id.json [skip ci]" || true
              git push
            else
              echo "No state changes."
            fi
          else
            echo "No state file present; nothing to commit."
          fi
